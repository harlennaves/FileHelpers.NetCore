<#@ template language="C#" hostSpecific="true" #>
<#@ output extension=".autogen.cs" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Data.dll" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
using System; 

<#

	Process("Messages");
    
#>

<#+

private FluentCode Code = new FluentCode();

public void Process(string folder)
{
	IServiceProvider hostServiceProvider = (IServiceProvider)Host;
	
	EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
	
	/* Retrieve the project in which this template resides. */
	EnvDTE.ProjectItem containingProjectItem = dte.Solution.FindProjectItem(Host.TemplateFile);
	Project project = containingProjectItem.ContainingProject;
	
	ProcessProjectItem((ProjectItem)project.ProjectItems.Item(folder), null);
	
    WriteLine(Code.GenerateCode());
}

public void ProcessProjectItem(ProjectItem projectItem, ProjectItem parent)
{

	if (projectItem.ProjectItems.Count == 0)
	{
		if (projectItem.get_FileNames(0).ToLower().EndsWith(".msg"))
			RenderItemCore(projectItem, parent);
	}
	else
	{
		foreach (ProjectItem childItem in projectItem.ProjectItems)
		{
			ProcessProjectItem(childItem, projectItem);
		}
	}

}

        private static Regex mRegExParametros = new Regex(@"\$(\w+)\$",
                        RegexOptions.Compiled
                        | RegexOptions.IgnorePatternWhitespace
                        | RegexOptions.Multiline
                        | RegexOptions.IgnoreCase);

          private string[] GetParameters(string test)
        {
            var match = mRegExParametros.Matches(test);

            if (match.Count == 0)
                return new string[] { };

            var lista = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
            foreach (Match m in match)
            {
                var value = m.Groups[1].Value;
                if (!lista.ContainsKey(value))
                    lista.Add(value, true);
            }

            var res = new List<string>();
            foreach (var item in lista.Keys)
            {
                res.Add(item);
            }

            return res.ToArray();
        }
		
		
private void RenderItemCore(ProjectItem item, ProjectItem parent)
{
	var filename = item.get_FileNames(0);
	var name = Path.GetFileNameWithoutExtension(filename);
    var filepath = ReplaceIgnoringCase(filename, Path.GetDirectoryName(Host.TemplateFile) + @"\", "");
	var xml = new XmlDocument();
    xml.Load(filename);


		var classCode = Code.Namespace("FileHelpers")
        .InternalClass("Messages")
		.Class(name);

		var msgClassCode = Code.Namespace("FileHelpers")
        .InternalClass("TypesOfMessages")
		.Class(name);

	   		foreach (var ele in xml.DocumentElement)
            {
                var element = (XmlElement) ele;
                var eleName = element.Name;
                var text = element.InnerText.Trim();
				
				var msgClass = eleName + "Class";
				
				classCode.AddStaticReadOnlyPropertyWithBackingField("TypesOfMessages." + name + "." + eleName + "Class", eleName);
				
				var classMsg = msgClassCode			
					.Class(msgClass, "MessageBase");
				
				classMsg.Add("internal " + msgClass + "(): base(@\"" + text.Replace("\"", "\"\"") +"\") {}");
				
				foreach(var par in GetParameters(text))
				{
					classMsg.Add(@" private string m" + par + " = null;");
					classMsg.Add(@" internal " + msgClass + " " + par +"(string value)");
					classMsg.Add(@"{");
					classMsg.Add(@"    m" + par +" = value;");
					classMsg.Add(@"    return this;");
					classMsg.Add(@"}");
					
				}

				classMsg.Add(@"    protected override string GenerateText() ");
				classMsg.Add(@"    {");
				classMsg.Add(@"        var res = SourceText;");
				foreach(var par in GetParameters(text))
				classMsg.Add("        res = StringHelper.ReplaceIgnoringCase(res, \"$"+par+"$\", m"+par+");");
				
				
				classMsg.Add(@"        return res;");
				classMsg.Add(@"    }");
			}        
}

		private void WriteLine()
		{
			WriteLine(string.Empty);
		}
		
		public static string ReplaceIgnoringCase(string original, string oldValue, string newValue)
        {
            return Replace(original, oldValue, newValue, StringComparison.OrdinalIgnoreCase);
        }

        public static string Replace(string original, string oldValue, string newValue, StringComparison comparisionType)
        {
            string result = original;

            if (!string.IsNullOrEmpty(oldValue))
            {
                int index = -1;
                int lastIndex = 0;

                System.Text.StringBuilder buffer = new System.Text.StringBuilder(original.Length);

                while ((index = original.IndexOf(oldValue, index + 1, comparisionType)) >= 0)
                {
                    buffer.Append(original, lastIndex, index - lastIndex);
                    buffer.Append(newValue);

                    lastIndex = index + oldValue.Length;
                }
                buffer.Append(original, lastIndex, original.Length - lastIndex);

                result = buffer.ToString();
            }

            return result;
        }  

    public sealed class FluentCode
    {
        private SortedDictionary<string, FluentNamespace> mNamespaces = new SortedDictionary<string, FluentNamespace>(StringComparer.OrdinalIgnoreCase);

        public FluentNamespace Namespace(string name)
        {
            FluentNamespace res;

            if (!mNamespaces.TryGetValue(name, out res))
            {
                res = new FluentNamespace(name);
                mNamespaces.Add(name, res);
            }
            return res;
        }

        public string GenerateCode()
        {
            var res = "";
            foreach (var n in mNamespaces)
            {
                res += n.Value.GenerateCode();
            }

            return res;
            
        }

    }

    public sealed class FluentNamespace
    {
        public string Name { get; private set; }

        public FluentNamespace(string name)
        {
            this.Name = name;
        }

        private SortedDictionary<string, FluentClass> mClasses = new SortedDictionary<string, FluentClass>(StringComparer.OrdinalIgnoreCase);

     public FluentClass Class(string name)
  {
  return Class(name, string.Empty);
  }
 
public FluentClass InternalClass(string name)
  {
  return InternalClass(name, string.Empty);
  }
        public FluentClass InternalClass(string name, string parent)
        {
			var res = Class(name, parent);
			res.access = "internal ";
			return res;
		} 
        public FluentClass Class(string name, string parent)
        {
            FluentClass res;

            if (!mClasses.TryGetValue(name, out res))
            {
                res = new FluentClass(name, parent);
                mClasses.Add(name, res);
            }

            return res;
        }


        public string GenerateCode()
        {
            var res = "namespace " + Name
                + Environment.NewLine
                + "{" 
                + Environment.NewLine;

            foreach (var c in mClasses)
            {
                res += c.Value.GenerateCode();
            }
                 
            res += Environment.NewLine +
                    "}";
            return res;
        }

    }

    public sealed class FluentClass
    {
        public string Name { get; private set; }
        public string Parent { get; private set; }
        
        public FluentClass(string name, string parent)
        {
            this.Name = name;
            this.Parent = parent;
        }

        private SortedDictionary<string, FluentClass> mClasses = new SortedDictionary<string, FluentClass>(StringComparer.OrdinalIgnoreCase);

      public FluentClass Class(string name)
  {
  return Class(name, string.Empty);
  }

      public FluentClass PrivateClass(string name)
  {
  		return PrivateClass(name, string.Empty);
  }

        public FluentClass PrivateClass(string name, string parent)
  {
  		var res = Class(name, parent);
		res.access = "private ";
		return res;
  }

        public FluentClass Class(string name, string parent)
        {
            FluentClass res;

            if (!mClasses.TryGetValue(name, out res))
            {
                res = new FluentClass(name, parent);
                mClasses.Add(name, res);
            }

            return res;
        }

		internal string access = "internal ";
        
		public string GenerateCode()
        {
            var res = access + "class " + Name
                + (string.IsNullOrEmpty(Parent) ? "" : ": " + Parent)
                + Environment.NewLine
                + "{"
                + Environment.NewLine;

            foreach (var c in mClasses)
            {
                res += c.Value.GenerateCode();
            }

            res += Environment.NewLine +
                mCode.ToString()
                + Environment.NewLine;

            res += Environment.NewLine +
        "}";
            return res;
        }

        public void Add(string code)
        {
            mCode.AppendLine(code);
        }

        public void AddStaticReadOnlyPropertyWithBackingField(string type, string name)
        {
            mCode.AppendLine("private static readonly " + type + " m" + name + " = new " + type + "();");
            mCode.AppendLine("internal static " + type + " " + name);
            mCode.AppendLine("{ get { return  m" + name + "; } }");
        }

        private StringBuilder mCode = new StringBuilder();
    }

	
#>